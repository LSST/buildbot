# -*- python -*-
# ex: set syntax=python:


# buildbot master -- tracula
c = BuildmasterConfig = {}

# slaves
from buildbot.buildslave import BuildSlave
    # max_builds=1 because some tasks share an LSST stack, 
    # which doesn't handle simultaneous modifications well
    # -- 64 bit buildbot Slaves --
c['slaves'] = [BuildSlave("willy", "accio_build", 
        notify_on_missing="rallsman@lsst.org", 
        missing_timeout=300, max_builds=1),
    BuildSlave("traction", "accio_build", 
        notify_on_missing="rallsman@lsst.org", 
        missing_timeout=300, max_builds=1),
    BuildSlave("fbot", "accio_build", 
        notify_on_missing="rallsman@lsst.org", 
        missing_timeout=300, max_builds=1),
    BuildSlave("lsst6", "accio_build", 
        notify_on_missing="rallsman@lsst.org", 
        missing_timeout=300, max_builds=1),
    # -- 32 bit buildbot Slaves --
    BuildSlave("tractor", "accio_build", 
        notify_on_missing="rallsman@lsst.org", 
        missing_timeout=300, max_builds=1),
    ]
c['slavePortnum'] = 9989

# -- sources
from buildbot.changes.svnpoller import SVNPoller
c['change_source'] = []
c['change_source'].append(SVNPoller("svn://svn.lsstcorp.org/DMS/", 
                                    pollinterval=60))

# -- schedulers
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Periodic
from buildbot.scheduler import Nightly
from buildbot.scheduler import Dependent
c['schedulers'] = []
# scheduling style: triggered, periodic, scheduled
nightly_release = Nightly(
    name="Nightly release install", hour=22, minute=00, 
    builderNames=["Release_Pipeline"]
    )
nightly_incremental_release = Nightly(
    name="Nightly incremental release install", hour=1, minute=10, 
    builderNames=["Release_Incremental"]
    )
# nightly_trunk = Nightly(name="Nightly trunk build", hour=2, minute=30, 
#    builderNames=["Full Trunk vs Current", 
#    "Full Trunk vs Minimal"]
#    )
nightly_TvT = Nightly(name="Nightly Full_Trunk_vs_Trunk", 
    hour=12, minute=05, 
    builderNames=["Full_Trunk_vs_Trunk"]
    )
nightly_TvTNT = Nightly(name="Nightly Full_Trunk_vs_Trunk_NoTest", 
    hour=0, minute=05, 
    builderNames=["Full_Trunk_vs_Trunk_NoTest"]
    )
nightly_datarel_TvTNT = Nightly(name="Nightly Datarel_Trunk_vs_Trunk", 
    month=12, dayOfMonth=24, hour=12, minute=0, 
    builderNames=["Datarel_Trunk_vs_Trunk"]
    )
# Only using a single triggered test until new buildbot slave setup
# sched_trigger = Scheduler(name="trigger DMS", branch=None, 
#    treeStableTimer=11*60, 
#    builderNames=["Trunk vs Minimal", "Trunk vs Current"])
#sched_trigger = Scheduler(name="trigger DMS", branch=None, 
#    treeStableTimer=11*60, 
#    builderNames=["Trunk vs Current"]
#    )
#                   nightly_TvTNT,
#                   sched_trigger,
c['schedulers'] = [nightly_release, 
                   nightly_incremental_release,
                   nightly_TvT, 
                   nightly_datarel_TvTNT] 

# -- logs
from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import ShellCommand, WithProperties
log_args = "-log_dest tracula:/var/www/html/buildlogs -log_url http://dev.lsstcorp.org/buildlogs"

class LogFileShellCommand(ShellCommand):
    log_files = []
    log_files.append("config.log")
    log_files.append("build.log")

    def __init__(self, **kwargs):
        # And upcall to let the base class do its work
        ShellCommand.__init__(self, **kwargs)

    def createSummary(self, log):
        for line in log.getText().split("\n"):
            for log_file in self.log_files:
                # line format is "    log file build.log saved to http://dev.lsstcorp.org/...."
                if (line.startswith("log file ") and line.find(" saved to ") >= 0):
                    split = line.split(" saved to ", 1)
                    self.addURL(split[0].split("log file ")[1], split[1])

slave_home_dir = "/home/buildbot"
slave_scripts_dir = slave_home_dir + "/scripts"
slave_script_prefix = "time " + slave_scripts_dir

# -- Release Pipeline: Schedule a full build using LSSTPipe components
f_release = factory.BuildFactory()
f_release.addStep(ShellCommand(workdir="work",  
    name="erase", 
    description="erase old working dir", 
    command='rm -rf *; echo "...." $? "...."'))
f_release.addStep(ShellCommand(workdir="work", 
    name="newinstall", 
    description="install LSST tools", 
    command=slave_script_prefix + "/run_newinstall.sh", 
    timeout=3600)
    )
# install LSSTPipe and check that pex_harness and mops are both installed
#f_release.addStep(LogFileShellCommand(workdir="work", 
#    name="LSSTPipe", description="install LSSTPipe", 
#    command=slave_script_prefix + 
#    "/release_package.sh LSSTPipe pex_harness mops", 
#    timeout=14400)
#    )
# for now, don't check dependencies, since they change from time to time
f_release.addStep(
    LogFileShellCommand(workdir="work",
    name="LSSTPipe",
    description="install LSSTPipe",
    command=slave_script_prefix + "/release_package.sh LSSTPipe",
    timeout=18000)
    )
f_release.addStep(LogFileShellCommand(workdir="work",
    name="Log Files",
    description="capture log files",
    command=slave_script_prefix + "/capture_logs.sh tracula:/var/www/html/buildlogs http://dev.lsstcorp.org/buildlogs build.log config.log",
    timeout=600)
    )
f_release_step_doxygen = LogFileShellCommand(workdir="work",
    name="build doxyDoc",
    description="build doxygen docs",
    timeout=3600,
    command=[slave_scripts_dir + "/create_xlinkdocs.sh",
    "current",
    "buildbot@willy.ncsa.illinois.edu:/var/www/html/doxygen",
    "http://dev.lsstcorp.org/doxygen"]
    )
f_release.addStep(f_release_step_doxygen)

b_release_64_willy = { 'name': "Release_Pipeline", 
    'slavename': "willy",
    'builddir': "Release",
    'factory': f_release 
    }
#b_release_32 = { 'name': "Release_Pipeline 32",
#   'slavename': "tractor",
#   'builddir': "Release",
#   'factory': f_release 
#   }

# -------------------------------------------------------------------------
#        Schedule build but without starting from scratch 
#        -- that is, don't erase old working dir
#                "Release incremental"
# -------------------------------------------------------------------------
f_rel_no_erase = factory.BuildFactory()
f_rel_no_erase.addStep(ShellCommand(workdir="work", 
    name="newinstall", 
    description="install LSST tools", 
    command=slave_script_prefix + "/run_newinstall.sh", 
    timeout=3600))
#   On new Release may need to update the installed packages using below OR
#   copying from lsst_install_willy/work/* to lsst_install_willy_2/work/
f_rel_no_erase.addStep(LogFileShellCommand(workdir="work", 
    name="LSSTPipe", 
    description="install LSSTPipe", 
    command=slave_script_prefix + "/release_package.sh LSSTPipe", 
    timeout=14400))
f_rel_no_erase.addStep(LogFileShellCommand(workdir="work", 
    name="Log Files", 
    description="capture log files", 
    command=slave_script_prefix + 
    "/capture_logs.sh tracula:/var/www/html/buildlogs http://dev.lsstcorp.org/buildlogs build.log config.log", 
    timeout=600))

b_rel_no_erase_64_willy = { 'name': "Release_Incremental", 
    'slavename': "willy", 
    'builddir': "IncRelease", 
    'factory': f_rel_no_erase 
    }
#b_rel_no_erase_32 = { 'name': "Release 32 incremental", 
#    'slavename': "tractor", 
#    'builddir': "IncRelease", 
#    'factory': f_rel_no_erase 
#    }

# -- Collect module names for all DM modules
import urllib2
f = urllib2.urlopen("http://dev.lsstcorp.org/dmspkgs/active.list")
manifest_lines = f.readlines()
pkgs = []
try:
    for line in manifest_lines:
        line = line.strip()
        if line.startswith('EUPS') or line.startswith('#') or line.find("external") >= 0:
            continue
        try:
            # name, flavor, version, tablefile, installDir, install id
            parts = line.split()
            if parts[0] == "scons":
                continue
            pkgs.append([parts[0]]) 
        except IndexError:
            pass
finally:
    f.close()

# -- shared step amongst builds
step_update_pipe = LogFileShellCommand(workdir="work",
   name="update stack",
   description="update stack",
   timeout=12000,
   command=slave_script_prefix + 
       "/release_package.sh -lsstdir /lsst/DC3/stacks/default -no_doxygen --tag=current LSSTPipe")

# -------------------------------------------------------------------------
#    trigger a full trunk build on checkins 
#    "Full Trunk vs Current"  "Full Trunk vs Minimal"  "Full Trunk vs Trunk"
# -------------------------------------------------------------------------
trunk_uniq = []
## f_trunk_each = factory.BuildFactory()
## f_TvsC = factory.BuildFactory()
## f_trunk_each.addStep(step_update_pipe)
## f_TvsC.addStep(step_update_pipe)

#  NOTE: assumes slave will use slave's work directory (default) or 'lsstdir' .
step_update_pipe_lsst = LogFileShellCommand(workdir="work",
   name="update stack",
   description="update stack",
   timeout=12000,
   command=slave_script_prefix + 
       "/release_package.sh -lsstdir /lsst/DC3/stacks/default -no_doxygen --tag=current LSSTPipe")
f_TvsT = factory.BuildFactory()
f_TvsT.addStep(step_update_pipe_lsst)
f_TvsTNT = factory.BuildFactory()
f_TvsTNT.addStep(step_update_pipe_lsst)

all_packages = ""
for pkg_ver in pkgs:
    name = pkg_ver[0]
    if name in trunk_uniq: #skip duplicates
        continue
    trunk_uniq.append(name)
    all_packages = all_packages + " " + name

    # add a step for each package
    ## trunk_cmd = slave_script_prefix + 
    ##     "/trunk_install.sh -force " + log_args + " " + name + " trunk"
    ## trunk_step = LogFileShellCommand(workdir="work",
    ##     name=name,
    ##     description=name + " trunk",
    ##     timeout=3600,
    ##     command=trunk_cmd)
    ## f_trunk_each.addStep(trunk_step)

    # add a steo for each package for build trunk against current
    ## trunk_cmd_current = slave_script_prefix + 
    ##    "/trunk_install.sh -force -against_current " +
    ##    log_args +
    ##    " " + name + " trunk"
    ## trunk_step_current = LogFileShellCommand(workdir="work",
    ##     name=name,
    ##     description=name + " trunk",
    ##     timeout=3600,
    ##     command=trunk_cmd_current
    ##     )
    ## f_TvsC.addStep(trunk_step_current)

    # ditto for build trunk against trunk
    # Following OK but dropped leading 'time' since slave failed if included.
    TvsT_step = LogFileShellCommand(workdir="work",
        name=name,
        description=name + " trunkVtrunk",
        timeout=3600,
        command=["time", slave_scripts_dir + "/trunkVsTrunk.sh",
            "-log_dest", "tracula:/var/www/html/buildlogs",
            "-log_url", "http://dev.lsstcorp.org/buildlogs",
            "-builder_name", WithProperties("%s", "buildername"),
            "-build_number", WithProperties("%s", "buildnumber") , 
            name ,
            "trunk"
            ]
        )
    f_TvsT.addStep(TvsT_step)
    # ditto for build trunk against trunk - NO TESTS
    TvsT_stepNT = LogFileShellCommand(workdir="work",
        name=name,
        description=name + " trunkVtrunk",
        timeout=3600,
        command=["time", slave_scripts_dir + "/trunkVsTrunk.sh",
            "-log_dest", "tracula:/var/www/html/buildlogs",
            "-log_url", "http://dev.lsstcorp.org/buildlogs",
            "-builder_name", WithProperties("%s", "buildername"),
            "-build_number", WithProperties("%s", "buildnumber"), 
            "-slave_devel", 
            "-no_tests",
            name , 
            "trunk"
            ]
        )
    f_TvsTNT.addStep(TvsT_stepNT)

    # monitor each package
    package_branch = name.replace("_", "/")
    c['change_source'].append(SVNPoller("svn://svn.lsstcorp.org/DMS/" + 
        package_branch + "/trunk", 
        pollinterval=300)
        )

# -- build trunk against current
## b_TvsC = { 'name': "Full Trunk vs Current",
##     'slavename': "traction",
##     'builddir': "TvsC", 
##     'factory': f_TvsC 
##     }

# -- build trunk against minimal dependencies
## b_TvsM_64 = { 'name': "Full Trunk vs Minimal",
##    'slavename': "willy",
##    'builddir': "TvsM",
##    'factory': f_trunk_each }
## b_TvsM_32 = { 'name': "Full Trunk vs Minimal 32",
##    'slavename': "nilly",
##    'builddir': "TvsM",
##    'factory': f_trunk_each }

# -- build doxygen documentation for trunk Vs trunk but not for NO TESTS version
trunk_step_doxygen = LogFileShellCommand(workdir="work",
    name="build doxyDoc",
    description="build doxygen docs",
    timeout=3600,
    command=[slave_scripts_dir + "/create_xlinkdocs.sh",
    "trunk",
    "buildbot@willy.ncsa.illinois.edu:/var/www/html/doxygen",
    "http://dev.lsstcorp.org/doxygen"])
f_TvsT.addStep(trunk_step_doxygen)

# -- build trunk against trunk 
b_TvsT = { 'name': "Full_Trunk_vs_Trunk",
    'slavename': "fbot",
    'builddir': "TvT",
    'factory': f_TvsT }
# -- trunk against trunk with NO TESTS
#b_TvsTNT = { 'name': "Full_Trunk_vs_Trunk_NoTest",
#    'slavename': "fbot",
#    'builddir': "TvTNT",
#    'factory': f_TvsTNT }



# -- datarel trunk against trunk 
f_datarel_TvsT = factory.BuildFactory()
# NO UPDATE on shared system: f_datarel_TvsT.addStep(step_update_pipe_lsst)
TvsT_step = LogFileShellCommand(workdir="work",
    name="datarel",
    description="datarel trunkVtrunk",
    timeout=3600,
    #    "-no_tests",
    command=["time", slave_scripts_dir + "/prTrunkVsTrunk.sh",
        "-log_dest", "tracula:/var/www/html/buildlogs",
        "-log_url", "http://dev.lsstcorp.org/buildlogs",
        "-builder_name", WithProperties("%s", "buildername"),
        "-build_number", WithProperties("%s", "buildnumber") , 
        "-production",
        "datarel" ,
        "trunk"
        ]
    )
f_datarel_TvsT.addStep(TvsT_step)
b_datarel_TvsT = { 'name': "Datarel_Trunk_vs_Trunk",
    'slavename': "lsst6",
    'builddir': "trunkVsTrunk_lsst",
    'factory': f_datarel_TvsT }


# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
#       trigger an incremental trunk build on checkins 
#       -- that is,  don't erase old working dir
#       "Trunk vs Current"  and  "Trunk vs Minimal" 
# -------------------------------------------------------------------------

#f_triggered_TvsC = factory.BuildFactory()
#f_triggered_TvsC.addStep(step_update_pipe)
#f_triggered_TvsC.addStep(LogFileShellCommand(workdir="work",
#    name="Incremental Trunk",
#    description="Incremental Trunk Build",
#    timeout=3600,
#    command=[slave_scripts_dir + "/triggered_trunk.sh",
#        "-against_current",
#        "-log_dest", "tracula:/var/www/html/buildlogs",
#        "-log_url", "http://dev.lsstcorp.org/buildlogs",
#        "-build_number", WithProperties("%s", "buildnumber") ,
#        "-name", "\"Trunk vs Current\"",
#        all_packages]
#    ))
#b_triggered_TvsC_64 = { 'name': "Trunk vs Current",
#    'slavename': "willy",
#    'builddir': "triggered_TvsC",
#    'factory': f_triggered_TvsC }

#Need new gcc#f_triggered_TvsM_32 = factory.BuildFactory()
#Need new gcc#f_triggered_TvsM_32.addStep(step_update_pipe)
#Need new gcc#triggered_cmd_32 = slave_script_prefix +
#    "/triggered_trunk.sh " +
#    log_args +
#    " -name \"Trunk 32\" " +
#    all_packages
#Need new gcc#f_triggered_TvsM_32.addStep(LogFileShellCommand(workdir="work",
#    name="Incremental Trunk",
#    description="Incremental Trunk Build",
#    timeout=3600,
#    command=triggered_cmd_32))
#b_triggered_TvsM_32 = { 'name': "Trunk vs Minimal 32",
#    'slavename': "tractor",
#    'builddir': "triggered_TvsM",
#    'factory': f_triggered_TvsM_32 }

#f_triggered_64 = factory.BuildFactory()
#f_triggered_64.addStep(step_update_pipe)
#triggered_cmd_64 = slave_script_prefix + 
#    "/triggered_trunk.sh -email_notify robyn@LSST.org " +
#    log_args +
#    " -name \"Trunk vs Minimal\" " +
#    all_packages
#f_triggered_64.addStep(LogFileShellCommand(workdir="work",
#    name="Incremental Trunk",
#    description="Incremental Trunk Build",
#    timeout=3600,
#    command=triggered_cmd_64)
#    )
#b_triggered_TvsM_64 = { 'name': "Trunk vs Minimal",
#    'slavename': "willy",
#    'builddir': "triggered_TvsM",
#    'factory': f_triggered_64 }


# status
c['status'] = []
from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010, allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="rallsman@lsst.org",
    extraRecipients=["rallsman@lsst.org"],
    mode="problem",
    sendToInterestedUsers=True))

c['projectName'] = "LSST Build"
c['projectURL'] = "http://dev.lsstcorp.org/build/"
c['buildbotURL'] = "http://dev.lsstcorp.org/build/"

# builders
#      moved together to control order of builders 
c['builders'] = []
#c['builders'].append(b_triggered_TvsC_64)        #TBD?? traction: temp willy#
#c['builders'].append(b_triggered_TvsM_64)       #      willy#
#c['builders'].append(b_triggered_TvsM_32)        #TBD?? tractor#
## c['builders'].append(b_TvsC)                   #TBD   traction#
## c['builders'].append(b_TvsM_64)                #TBD   willy#
#c['builders'].append(b_TvsM_32)                  #TBD?? tractor#
c['builders'].append(b_release_64_willy)         #      willy#
c['builders'].append(b_rel_no_erase_64_willy)    #      willy#
#c['builders'].append(b_release_32)               #TBD?? tractor#
#c['builders'].append(b_rel_no_erase_32)
c['builders'].append(b_TvsT)                     #       fbot#
#c['builders'].append(b_TvsTNT)                   #       fbot#
c['builders'].append(b_datarel_TvsT)           #       lsst6#
